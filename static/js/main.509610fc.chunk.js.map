{"version":3,"sources":["views/HomePage.js","components/GUI.js","algorithm/kirkpatrick_1.js","views/DemoPage.js","theme/theme.js","App.js","reportWebVitals.js","index.js"],"names":["HomePage","Box","sx","backgroundColor","width","height","display","justifyContent","alignItems","textAlign","Typography","variant","color","Button","href","mt","GUI","props","useState","open","setOpen","List","component","dense","minWidth","maxWidth","bgcolor","ListItemButton","onClick","ListItemText","primary","Collapse","in","timeout","unmountOnExit","disablePadding","Divider","mb","ml","mr","flexDirection","pb","justifyItems","TextField","size","type","value","n","onChange","e","target","setNum","align","Radio","checked","setType","pl","hideTextfield","setOutsideColor","outsideColor","setInsideColor","insideColor","setGenerate","triangulate","pts","vertices","i","length","push","THREE","x","y","convert","triangulateShape","triangles","a","Pt","b","c","Group","fromPtArray","triangulateHole","hole","holes","h","index","kirkpatrick","outer_triangle","independent_set","adjacency","includes","p","array","add","computeAdjacencyGraph","keys","Object","k","s","split","j","concat","f","parseFloat","convertToPoint","neighbors","independent","findIndependentSet","clone","filter","item","new_triangles","new_triangles_hole","all_triangles","insert","computeKirkpatrick","polygon","leftmost","Number","POSITIVE_INFINITY","rightmost","NEGATIVE_INFINITY","upper","lower","isInUpper","slope","sortX","sort","sorted_upper","sorted_lower","reverse","triangles_hole","levels","points","new_all_triangles","prev","dag","same","found","intersect","old_tri","new_tri","inside","new_a","old_triangles","filtered_new_triangles","filtered_old_triangles","computeDag","DemoPage","triangle","triangleHole","setPts","outerTriangle","setOuterTriangle","createColor","slide","setSlide","pointTriangle","setPointTriangle","generate","pointer","useRef","info","position","style","onStart","space","num_points","x_size","y_size","new_pts","Math","floor","random","onAnimate","form","time","big_triangles","fill","parseInt","css","polygons","bindMouse","bindTouch","play","point","current","point_triangle","queue","pop","Polygon","hasIntersectPoint","findLocation","theme","createTheme","palette","mode","App","ThemeProvider","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.509610fc.chunk.js","sourcesContent":["import React from \"react\";\nimport { Box, Typography, Button } from \"@mui/material\";\n\nexport default function HomePage() {\n  return (\n    <Box\n      sx={{\n        backgroundColor: \"background.default\",\n        width: \"100vw\",\n        height: \"100vh\",\n        display: \"flex\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n      }}\n    >\n      <Box sx={{ textAlign: \"center\" }}>\n        <Typography variant=\"h2\" sx={{ color: \"white\" }}>\n          Kirkpatrick's Algorithm\n        </Typography>\n        <Button variant=\"contained\" href=\"#/demo\" sx={{ mt: 10 }}>\n          Demo\n        </Button>\n      </Box>\n    </Box>\n  );\n}\n","import React, { useState } from \"react\";\nimport {\n  Box,\n  Button,\n  Collapse,\n  Divider,\n  List,\n  ListItemText,\n  ListItemButton,\n  Radio,\n  TextField,\n} from \"@mui/material\";\nimport ExpandLess from \"@mui/icons-material/ExpandLess\";\nimport ExpandMore from \"@mui/icons-material/ExpandMore\";\nimport { ColorPicker } from \"material-ui-color\";\n\nexport default function GUI(props) {\n  const [open, setOpen] = useState(true);\n\n  return (\n    <Box>\n      <List\n        component=\"nav\"\n        dense={true}\n        sx={{\n          width: \"100%\",\n          minWidth: 200,\n          maxWidth: 200,\n          bgcolor: \"background.paper\",\n        }}\n      >\n        <ListItemButton\n          onClick={() => {\n            setOpen(!open);\n          }}\n        >\n          <ListItemText primary=\"GUI\" sx={{ color: \"white\" }} />\n          {open ? (\n            <ExpandLess sx={{ color: \"white\" }} />\n          ) : (\n            <ExpandMore sx={{ color: \"white\" }} />\n          )}\n        </ListItemButton>\n        <Collapse in={open} timeout=\"auto\" unmountOnExit>\n          <List component=\"div\" disablePadding dense={true}>\n            <Divider sx={{ mb: 1 }} />\n            <Box sx={{ ml: 2, mr: 2, mb: 1 }}>\n              <Box\n                sx={{\n                  display: \"flex\",\n                  flexDirection: \"row\",\n                  pb: 1,\n                  alignItems: \"center\",\n                  justifyItems: \"center\",\n                }}\n              >\n                <ListItemText primary=\"N\" sx={{ color: \"white\" }} />\n                <TextField\n                  size=\"small\"\n                  type=\"number\"\n                  value={props.n}\n                  onChange={(e) => {\n                    if (e.target.value >= 3) {\n                      props.setNum(e.target.value);\n                    } else {\n                      props.setNum(3);\n                    }\n                  }}\n                  sx={{ width: \"50%\", align: \"right\" }}\n                />\n              </Box>\n              <Box\n                sx={{\n                  display: \"flex\",\n                  flexDirection: \"row\",\n                  alignItems: \"center\",\n                  justifyItems: \"center\",\n                }}\n              >\n                <ListItemText primary=\"Animate\" sx={{ color: \"white\" }} />\n                <Radio\n                  checked={props.type === \"animate\"}\n                  onClick={() => {\n                    if (props.type === \"animate\") {\n                      props.setType(\"\");\n                    } else {\n                      props.setType(\"animate\");\n                    }\n                  }}\n                />\n              </Box>\n              <Box\n                sx={{\n                  display: \"flex\",\n                  flexDirection: \"row\",\n                  alignItems: \"center\",\n                  justifyItems: \"center\",\n                }}\n              >\n                <ListItemText primary=\"Find Point\" sx={{ color: \"white\" }} />\n                <Radio\n                  checked={props.type === \"find\"}\n                  onClick={() => {\n                    if (props.type === \"find\") {\n                      props.setType(\"\");\n                    } else {\n                      props.setType(\"find\");\n                    }\n                  }}\n                />\n              </Box>\n              <Box\n                sx={{\n                  display: \"flex\",\n                  flexDirection: \"row\",\n                  alignItems: \"center\",\n                  justifyItems: \"center\",\n                }}\n              >\n                <ListItemText primary=\"Color\" sx={{ color: \"white\" }} />\n              </Box>\n              <Box sx={{ pl: 2 }}>\n                <Box\n                  sx={{\n                    display: \"flex\",\n                    flexDirection: \"row\",\n                    alignItems: \"center\",\n                    justifyItems: \"center\",\n                  }}\n                >\n                  <ListItemText\n                    primary=\"Outside\"\n                    sx={{ color: \"white\", mr: 7 }}\n                  />\n                  <ColorPicker\n                    hideTextfield\n                    onChange={(color) => {\n                      props.setOutsideColor(color);\n                    }}\n                    value={props.outsideColor}\n                  />\n                </Box>\n                <Box\n                  sx={{\n                    display: \"flex\",\n                    flexDirection: \"row\",\n                    alignItems: \"center\",\n                    justifyItems: \"center\",\n                  }}\n                >\n                  <ListItemText\n                    primary=\"Inside\"\n                    sx={{ color: \"white\", mr: 7 }}\n                  />\n                  <ColorPicker\n                    hideTextfield\n                    onChange={(color) => {\n                      props.setInsideColor(color);\n                    }}\n                    value={props.insideColor}\n                  />\n                </Box>\n              </Box>\n              <Box\n                sx={{\n                  display: \"flex\",\n                  flexDirection: \"row\",\n                  alignItems: \"center\",\n                  justifyItems: \"center\",\n                  justifyContent: \"center\",\n                  mt: 2,\n                }}\n              >\n                <Button\n                  variant=\"contained\"\n                  onClick={() => {\n                    props.setGenerate(true);\n                  }}\n                >\n                  Generate\n                </Button>\n              </Box>\n            </Box>\n          </List>\n        </Collapse>\n      </List>\n    </Box>\n  );\n}\n","import { containerClasses } from \"@mui/material\";\nimport { Pt, Group, Polygon } from \"pts\";\nimport * as THREE from \"three\";\n\nfunction polygon(pts) {\n  let polygon = [];\n  let leftmost = new Pt(Number.POSITIVE_INFINITY, 0);\n  let rightmost = new Pt(Number.NEGATIVE_INFINITY, 0);\n\n  for (let i = 0; i < pts.length; i++) {\n    if (leftmost.x > pts[i].x) {\n      leftmost = pts[i];\n    }\n    if (rightmost.x < pts[i].x) {\n      rightmost = pts[i];\n    }\n  }\n\n  let upper = [];\n  let lower = [];\n\n  let isInUpper = (p) => {\n    let slope = (rightmost.y - leftmost.y) / (rightmost.x - leftmost.x);\n    let b = leftmost.y - slope * leftmost.x;\n    return slope * p.x + b > p.y;\n  };\n\n  for (let i = 0; i < pts.length; i++) {\n    if (isInUpper(pts[i])) {\n      upper.push(pts[i]);\n    } else {\n      lower.push(pts[i]);\n    }\n  }\n\n  let sortX = (pts) => {\n    return pts.sort((a, b) => a.x - b.x);\n  };\n\n  let sorted_upper = sortX(upper);\n  let sorted_lower = sortX(lower);\n\n  polygon = sorted_upper.concat(sorted_lower.reverse());\n  return Group.fromPtArray(polygon);\n}\n\nfunction triangulate(pts) {\n  let convert = (pts) => {\n    let vertices = [];\n\n    for (let i = 0; i < pts.length; i++) {\n      vertices.push(new THREE.Vector2(pts[i].x, pts[i].y));\n    }\n    return vertices;\n  };\n\n  let vertices = convert(pts);\n\n  let triangulate = THREE.ShapeUtils.triangulateShape(vertices, []);\n\n  let triangles = [];\n  for (let i = 0; i < triangulate.length; i++) {\n    let a = new Pt(\n      vertices[triangulate[i][0]].x,\n      vertices[triangulate[i][0]].y\n    );\n    let b = new Pt(\n      vertices[triangulate[i][1]].x,\n      vertices[triangulate[i][1]].y\n    );\n    let c = new Pt(\n      vertices[triangulate[i][2]].x,\n      vertices[triangulate[i][2]].y\n    );\n    triangles.push(new Group(a, b, c, a));\n  }\n  return Group.fromPtArray(triangles);\n}\n\nfunction triangulateHole(pts, hole) {\n  let convert = (pts) => {\n    let vertices = [];\n\n    for (let i = 0; i < pts.length; i++) {\n      vertices.push(new THREE.Vector2(pts[i].x, pts[i].y));\n    }\n    return vertices;\n  };\n  let vertices = convert(pts);\n\n  let holes = [];\n  let h = [];\n  for (let i = 0; i < hole.length; i++) {\n    h.push(new THREE.Vector2(hole[i].x, hole[i].y));\n  }\n  holes.push(h);\n\n  let triangulate = THREE.ShapeUtils.triangulateShape(vertices, holes);\n\n  let triangles = [];\n  for (let i = 0; i < triangulate.length; i++) {\n    let convert = (index, vertices, holes) => {\n      if (index >= vertices.length) {\n        return new Pt(\n          holes[index - vertices.length].x,\n          holes[index - vertices.length].y\n        );\n      } else {\n        return new Pt(vertices[index].x, vertices[index].y);\n      }\n    };\n    let a = convert(triangulate[i][0], vertices, holes[0]);\n    let b = convert(triangulate[i][1], vertices, holes[0]);\n    let c = convert(triangulate[i][2], vertices, holes[0]);\n    triangles.push(new Group(a, b, c, a));\n  }\n  return Group.fromPtArray(triangles);\n}\n\nfunction computeAdjacencyGraph(triangles) {\n  let adjacency = {};\n\n  for (let i = 0; i < triangles.length; i++) {\n    let a = triangles[i][0];\n    let b = triangles[i][1];\n    let c = triangles[i][2];\n\n    let includes = (p, array) => {\n      for (let i = 0; i < array.length; i++) {\n        if (array[i].x === p.x && array[i].y === p.y) {\n          return true;\n        }\n      }\n      return false;\n    };\n\n    let add = (a, b) => {\n      if (!adjacency[a]) {\n        adjacency[a] = [];\n      }\n      if (!adjacency[b]) {\n        adjacency[b] = [];\n      }\n      if (!includes(b, adjacency[a])) {\n        adjacency[a].push(b);\n      }\n\n      if (!includes(a, adjacency[b])) {\n        adjacency[b].push(a);\n      }\n    };\n\n    add(a, b);\n    add(a, c);\n    add(b, c);\n  }\n\n  return adjacency;\n}\n\nfunction findIndependentSet(pts, triangles, outer_triangle) {\n  if (pts.length === 2) {\n    return Group.fromPtArray([pts[0]]);\n  }\n\n  let independent_set = [];\n  let adjacency = computeAdjacencyGraph(triangles);\n\n  let keys = Object.keys(adjacency);\n  for (let i = 0; i < keys.length; i++) {\n    let convertToPoint = (p) => {\n      let s = p.split(\",\");\n      let n = [];\n      for (let j = 0; j < s.length; j++) {\n        n = n.concat(s[j].split(\"(\"));\n      }\n\n      let f = [];\n      for (let j = 0; j < n.length; j++) {\n        f = f.concat(n[j].split(\")\"));\n      }\n      return new Pt(parseFloat(f[1]), parseFloat(f[2]));\n    };\n\n    let includes = (p, array) => {\n      for (let i = 0; i < array.length; i++) {\n        if (array[i].x === p.x && array[i].y === p.y) {\n          return true;\n        }\n      }\n      return false;\n    };\n\n    // convert string to point\n    let k = convertToPoint(keys[i]);\n\n    // if it is not part of the big triangle\n    if (!includes(k, outer_triangle)) {\n      // if its adjacent list has no point in independent set\n      let neighbors = adjacency[keys[i]];\n      let independent = true;\n      for (let j = 0; j < neighbors.length; j++) {\n        if (includes(neighbors[j], independent_set)) {\n          independent = false;\n        }\n      }\n\n      if (independent) {\n        independent_set.push(k);\n      }\n    }\n  }\n\n  return Group.fromPtArray(independent_set);\n}\n\nfunction kirkpatrick(pts, triangles, outer_triangle) {\n  // find independent set\n  let independent_set = findIndependentSet(\n    pts.clone(),\n    triangles.clone(),\n    outer_triangle.clone()\n  );\n\n  // remove points from list\n  let equal = (a, b) => {\n    return a.x === b.x && a.y === b.y;\n  };\n\n  for (let i = 0; i < independent_set.length; i++) {\n    pts = pts.filter((item) => {\n      return !equal(item, independent_set[i]);\n    });\n  }\n\n  // re-triangulate\n  let new_triangles = triangulate(pts.clone());\n  let new_triangles_hole = triangulateHole(outer_triangle.clone(), pts.clone());\n  let all_triangles = new_triangles.clone().insert(new_triangles_hole.clone());\n\n  return [pts, new_triangles, new_triangles_hole, all_triangles];\n}\n\nfunction computeDag(levels) {\n  let dag = {};\n  let same = (a, b) => {\n    for (let i = 0; i < a.length; i++) {\n      let found = false;\n      for (let j = 0; j < b.length; j++) {\n        if (a[i].x === b[j].x && a[i].y === b[j].y) {\n          found = true;\n        }\n      }\n      if (!found) {\n        return false;\n      }\n    }\n    return true;\n  };\n\n  let intersect = (old_tri, new_tri) => {\n    // point in old must be in new\n    let inside = false;\n    for (let i = 0; i < old_tri.length; i++) {\n      if (!same(old_tri, new_tri)) {\n        inside = true;\n      }\n    }\n    return inside;\n  };\n\n  let filter = (a, b) => {\n    let new_a = [];\n    for (let i = 0; i < a.length; i++) {\n      let s = false;\n      for (let j = 0; j < b.length; j++) {\n        if (same(a[i], b[j])) {\n          s = true;\n        }\n      }\n      if (!s) {\n        new_a.push(a[i]);\n      }\n    }\n\n    return new_a;\n  };\n\n  for (let i = 0; i < levels.length; i++) {\n    if (i + 1 < levels.length) {\n      let new_triangles = levels[i + 1][3];\n      let old_triangles = levels[i][3];\n\n      // filter out same triangles\n      let filtered_new_triangles = filter(new_triangles, old_triangles);\n      let filtered_old_triangles = filter(old_triangles, new_triangles);\n\n      // for each new triangle\n      for (let j = 0; j < filtered_new_triangles.length; j++) {\n        // find old triangles that intersect it\n        for (let k = 0; k < filtered_old_triangles.length; k++) {\n          if (intersect(filtered_old_triangles[k], filtered_new_triangles[j])) {\n            if (!dag[filtered_new_triangles[j]]) {\n              dag[filtered_new_triangles[j]] = [];\n            }\n            dag[filtered_new_triangles[j]].push(filtered_old_triangles[k]);\n          }\n        }\n      }\n    }\n  }\n  return dag;\n}\n\nexport function findLocation(point, dag, outer_triangle) {\n  let queue = [];\n  queue.push(dag[outer_triangle]);\n\n  while (queue.length > 0) {\n    let triangles = queue.pop(0);\n    // list of triangles\n    for (let i = 0; i < triangles.length; i++) {\n      if (Polygon.hasIntersectPoint(triangles[i], point)) {\n        if (!dag[triangles[i]]) {\n          return triangles[i];\n        } else {\n          queue.push(dag[triangles[i]]);\n        }\n      }\n    }\n  }\n\n  return new Group();\n}\n\nexport function computeKirkpatrick(pts, outer_triangle) {\n  pts = polygon(pts);\n\n  // triangulate polygon\n  let triangles = triangulate(pts.clone());\n\n  // triangulate hole\n  let triangles_hole = triangulateHole(outer_triangle.clone(), pts.clone());\n\n  // compute kirkpatrick's algorithm\n  let all_triangles = triangles.clone().insert(triangles_hole.clone());\n  let levels = [];\n\n  levels.push([pts, triangles, triangles_hole, all_triangles]);\n\n  let [points, new_triangles, new_triangles_hole, new_all_triangles] =\n    kirkpatrick(pts.clone(), all_triangles.clone(), outer_triangle.clone());\n\n  levels.push([points, new_triangles, new_triangles_hole, new_all_triangles]);\n\n  let prev = points.length;\n  while (points.length !== 1 || prev != points.length) {\n    [points, new_triangles, new_triangles_hole, new_all_triangles] =\n      kirkpatrick(\n        points.clone(),\n        new_all_triangles.clone(),\n        outer_triangle.clone()\n      );\n    prev = points.length;\n\n    levels.push([points, new_triangles, new_triangles_hole, new_all_triangles]);\n  }\n\n  let dag = computeDag(levels);\n  dag[outer_triangle] = new_all_triangles;\n\n  return [triangles, triangles_hole, levels, dag];\n}\n\n// check if there is a path to get to each small triangle\n//   for (let i = 0; i < all_triangles.length; i++) {\n//     let point = all_triangles[i][0];\n//     let queue = [];\n//     queue.push(outer_triangle);\n//     let found = false;\n//     while (queue.length > 0) {\n//       let tri = queue.pop(0);\n//       for (let j = 0; j < tri.length; j++) {\n//         if (Polygon.hasIntersectPoint(tri[j], point)) {\n//           if (!dag[tri[j]]) {\n//             found = true;\n//             console.log(\"found\");\n//           } else {\n//             queue.push(dag[tri[j]]);\n//           }\n//         }\n//       }\n//     }\n\n//     if (!found) {\n//       console.log(all_triangles[i]);\n//       console.log(\"HERE\");\n//     }\n//   }\n\n//   let keys = Object.keys(dag);\n//   let found = false;\n//   let equal = (a, b) => {\n//     let pointEqual = (X, Y) => {\n//       return X.x === Y.x && X.y === Y.y;\n//     };\n\n//     return (\n//       pointEqual(a[0], b[0]) && pointEqual(a[1], b[1]) && pointEqual(a[2], b[2])\n//     );\n//   };\n\n//   for (let i = 0; i < all_triangles.length; i++) {\n//     for (let j = 0; j < keys.length; j++) {\n//       let triangles = dag[keys[j]];\n//       for (let k = 0; k < triangles.length; k++) {\n//         if (equal(triangles[k], all_triangles[i])) {\n//           found = true;\n//         }\n//       }\n//     }\n\n//     if (!found) {\n//       console.log(\"not found\");\n//     } else {\n//       console.log(\"found\");\n//     }\n//   }\n\n// create DAG\n//   // go through each independent point\n//   for (let i = 0; i < independent_set.length; i++) {\n//     let poly = [];\n//     let original_triangles = [];\n//     // find the triangles the point is a part of\n//     for (let j = 0; j < triangles.length; j++) {\n//       let part_of_triangle = false;\n\n//       for (let k = 0; k < triangles[j].length; k++) {\n//         if (\n//           triangles[j][k].x === independent_set[i].x &&\n//           triangles[j][k].y === independent_set[i].y\n//         ) {\n//           part_of_triangle = true;\n//         }\n//       }\n\n//       // if point is part of triangle, add points to polygon\n//       if (part_of_triangle) {\n//         original_triangles.push(triangles[j]);\n//         for (let k = 0; k < triangles[j].length; k++) {\n//           if (\n//             triangles[j][k].x !== independent_set[i].x &&\n//             triangles[j][k].y !== independent_set[i].y\n//           ) {\n//             poly.push(triangles[j][k]);\n//           }\n//         }\n//       }\n//     }\n\n//     // triangulate the polygon\n//     poly = polygon(poly);\n//     let tri = triangulate(poly);\n\n//     // find which ones of the old triangles intersect with the new triangles\n//     for (let j = 0; j < tri.length; j++) {\n//       let triangle = tri[j];\n\n//       for (let k = 0; k < original_triangles.length; k++) {\n//         if (Polygon.hasIntersectPolygon(triangle, original_triangles[k])) {\n//           if (!dag[triangles[j]]) {\n//             dag[triangles[j]] = [];\n//           }\n//           dag[triangles[j]].push(original_triangles[k]);\n//         }\n//       }\n//     }\n//   }\n","import React, { useState, useRef } from \"react\";\nimport { Box } from \"@mui/material\";\nimport { Pt, Group } from \"pts\";\nimport { QuickStartCanvas } from \"react-pts-canvas\";\nimport GUI from \"../components/GUI\";\nimport { computeKirkpatrick, findLocation } from \"../algorithm/kirkpatrick_1\";\nimport { createColor } from \"material-ui-color\";\n\nexport default function DemoPage() {\n  const [pts, setPts] = useState(new Group());\n  const [outerTriangle, setOuterTriangle] = useState(new Group());\n  const [n, setNum] = useState(10);\n  const [outsideColor, setOutsideColor] = useState(createColor(\"#FFA908\"));\n  const [insideColor, setInsideColor] = useState(createColor(\"#72B4F6\"));\n  const [slide, setSlide] = useState(0);\n  const [pointTriangle, setPointTriangle] = useState(new Group());\n  const [generate, setGenerate] = useState(false);\n  const [type, setType] = useState(\"\");\n  const pointer = useRef(new Pt());\n\n  let triangle;\n  let triangleHole;\n  let levels = [];\n  let dag = {};\n\n  if (pts.length > 0) {\n    let info = computeKirkpatrick(pts, outerTriangle);\n    triangle = info[0];\n    triangleHole = info[1];\n    let all_triangles = triangle.clone().insert(triangleHole.clone());\n    levels = [];\n    levels.push(...info[2]);\n    dag = info[3];\n  }\n\n  return (\n    <Box sx={{ height: \"100vh\" }}>\n      <Box sx={{ position: \"absolute\" }}>\n        <GUI\n          n={n}\n          setNum={setNum}\n          outsideColor={outsideColor}\n          setOutsideColor={setOutsideColor}\n          insideColor={insideColor}\n          setInsideColor={setInsideColor}\n          generate={generate}\n          setGenerate={setGenerate}\n          type={type}\n          setType={setType}\n        />\n      </Box>\n      <QuickStartCanvas\n        style={{ height: \"100%\" }}\n        onStart={(space) => {\n          let num_points = n;\n          let x_size = space.size.x * 0.3;\n          let y_size = space.size.y * 0.3;\n          let new_pts = [];\n          for (let i = 0; i < num_points; i++) {\n            new_pts.push(\n              new Pt(\n                space.size.x * 0.35 + Math.floor(x_size * Math.random()),\n                space.size.y * 0.45 + Math.floor(y_size * Math.random())\n              )\n            );\n          }\n\n          setPts(Group.fromPtArray(new_pts));\n\n          setOuterTriangle(\n            new Group(\n              new Pt(space.size.x * 0.5, space.size.y * 0.01),\n              new Pt(space.size.x * 0.01, space.size.y * 0.95),\n              new Pt(space.size.x * 0.99, space.size.y * 0.95)\n            )\n          );\n        }}\n        onAnimate={(space, form, time) => {\n          // draw large triangle\n          let big_triangles = new Group(\n            new Pt(space.size.x * 0.5, space.size.y * 0.01),\n            new Pt(space.size.x * 0.01, space.size.y * 0.95),\n            new Pt(space.size.x * 0.99, space.size.y * 0.95)\n          );\n          form.fill(\"#9ab\").polygon(big_triangles);\n\n          // n changes\n          if (parseInt(n) !== parseInt(pts.length) || generate) {\n            setGenerate(false);\n            let num_points = n;\n            let x_size = space.size.x * 0.3;\n            let y_size = space.size.y * 0.3;\n            let new_pts = [];\n            for (let i = 0; i < num_points; i++) {\n              new_pts.push(\n                new Pt(\n                  space.size.x * 0.35 + Math.floor(x_size * Math.random()),\n                  space.size.y * 0.45 + Math.floor(y_size * Math.random())\n                )\n              );\n            }\n\n            setPts(Group.fromPtArray(new_pts));\n\n            setOuterTriangle(\n              new Group(\n                new Pt(space.size.x * 0.5, space.size.y * 0.01),\n                new Pt(space.size.x * 0.01, space.size.y * 0.95),\n                new Pt(space.size.x * 0.99, space.size.y * 0.95)\n              )\n            );\n\n            if (pts.length > 0) {\n              let info = computeKirkpatrick(pts, outerTriangle);\n              triangle = info[0];\n              triangleHole = info[1];\n              let all_triangles = triangle.clone().insert(triangleHole.clone());\n\n              levels = [];\n              levels.push(...info[2]);\n\n              dag = info[3];\n            }\n          }\n\n          // animate\n          if (type === \"animate\") {\n            if (slide !== parseInt((time / 1000) % levels.length)) {\n              setSlide((slide + 1) % levels.length);\n            }\n\n            // animate levels\n            form\n              .fill(insideColor.css.backgroundColor)\n              .polygons(levels[slide][1]);\n            // draw triangulation with hole\n            form\n              .fill(outsideColor.css.backgroundColor)\n              .polygons(levels[slide][2]);\n            // draw points\n            form.fill(\"#fff\").points(levels[slide][0], 5, \"circle\");\n          } else {\n            setSlide(0);\n            form.fill(insideColor.css.backgroundColor).polygons(triangle);\n            form.fill(outsideColor.css.backgroundColor).polygons(triangleHole);\n            form.fill(\"#fff\").points(pts, 5, \"circle\");\n          }\n\n          // find point\n          if (type === \"find\") {\n            space.bindMouse().bindTouch().play();\n            form.fill(\"#455\").point(space.pointer, 5);\n\n            if (\n              pointer.current.x !== space.pointer.x &&\n              pointer.current.y !== space.pointer.y\n            ) {\n              pointer.current = space.pointer;\n              let point_triangle = findLocation(\n                pointer.current,\n                dag,\n                outerTriangle\n              );\n\n              setPointTriangle(point_triangle);\n            }\n\n            form.fill(\"672\").polygon(pointTriangle);\n          }\n        }}\n      />\n    </Box>\n  );\n}\n\n//   new_pts = [\n//     new Pt(444, 343.25),\n//     new Pt(904, 277.25),\n//     new Pt(819, 363.25),\n//     new Pt(761, 228.25),\n//     new Pt(717, 308.25),\n//     new Pt(768, 353.25),\n//     new Pt(1071, 578.25),\n//     new Pt(443, 203.25),\n//     new Pt(564, 585.25),\n//     new Pt(652, 361.25),\n//   ];\n\n//   new_pts = [\n//     new Pt(529.3499755859375, 355.04998779296875),\n//     new Pt(455.3500061035156, 493.04998779296875),\n//     new Pt(337.3500061035156, 541.0499877929688),\n//     new Pt(473.3500061035156, 522.0499877929688),\n//     new Pt(323.3500061035156, 409.04998779296875),\n//   ];\n","import { createTheme } from \"@mui/material/styles\";\n\nconst theme = createTheme({\n  palette: {\n    mode: \"dark\",\n  },\n});\n\nexport default theme;\n","import { HashRouter as Router, Switch, Route } from \"react-router-dom\";\nimport { ThemeProvider } from \"@mui/system\";\nimport HomePage from \"./views/HomePage\";\nimport DemoPage from \"./views/DemoPage\";\nimport theme from \"./theme/theme\";\n\nfunction App() {\n  return (\n    <ThemeProvider theme={theme}>\n      <Router>\n        <Switch>\n          <Route exact path=\"/\" component={HomePage} />\n          <Route exact path=\"/demo\" component={DemoPage} />\n        </Switch>\n      </Router>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}